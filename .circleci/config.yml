# requires following ENV vars to be registered in CircleCI :
#
# DOCKER_HUB_USERNAME
# DOCKER_HUB_PASSWORD
version: 2

defaults: &defaults
  environment:
    DOCKER_IMAGE_NAME: apigeeks/a6s-k8s-keycloak-manager
    
  working_directory: ~/repo
  docker:
    - image: circleci/node:10

jobs:
  build:
    machine: true
    steps:
      - run:
          name: Install nvm
          command: |
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash

            if [[ -z "$CIRCLE_BUILD_NUM" ]]; then       
              export NVM_DIR="$HOME/.nvm"
              echo 'export NVM_DIR=$HOME/.nvm' >> $BASH_ENV
              echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            else 
              export NVM_DIR=/opt/circleci/.nvm
              echo 'export NVM_DIR=/opt/circleci/.nvm' >> $BASH_ENV
              echo 'source $NVM_DIR/nvm.sh' >> $BASH_ENV
            fi
      - run:  
          name: Install Node.js
          command: |           
            nvm install --lts
            nvm alias default 'lts/*'
            # Install Yarn package manager
            npm install --global yarn
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      
      - checkout

      - run: 
          name: yarn install && yarn build
          command: |
            yarn install
            yarn build     
      - run: 
          name: run tests and generate coverage report
          command: |
            yarn docker:test                                  
      
      # send test coverage
      - run: bash <(curl -s https://codecov.io/bash) -f ./coverage/coverage.lcov      

      # store artifacts
      - store_artifacts:
          path: ./coverage

      # store artifacts
      - store_artifacts:
          path: ./mochawesome-report

  build_only:
    <<: *defaults
    steps:
      - checkout
      
      - setup_remote_docker

      - run:
          command: |
            mkdir docker-cache/
            
            
            if [[ -z "$CIRCLE_BUILD_NUM" ]]; then                            
              sudo docker build -t $DOCKER_IMAGE_NAME:latest .
              sudo docker save -o docker-cache/image.tar $DOCKER_IMAGE_NAME:latest
            else          
              docker build -t $DOCKER_IMAGE_NAME:latest .
              docker save -o docker-cache/image.tar $DOCKER_IMAGE_NAME:latest              
            fi
      - save_cache:
          key: docker-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - docker-cache
  
  deploy:
    <<: *defaults
    steps:
      - restore_cache:
          keys:
            - docker-cache-{{ .Branch }}-{{ .Revision }}
      
      - setup_remote_docker

      - run: 
          command: |
            if [[ -z "$CIRCLE_BUILD_NUM" ]]; then                            
              sudo docker load < docker-cache/image.tar
              sudo docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:$CIRCLE_TAG
              sudo docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD

              sudo docker push $DOCKER_IMAGE_NAME:$CIRCLE_TAG
              sudo docker push $DOCKER_IMAGE_NAME:latest
            else
              docker load < docker-cache/image.tar
              docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:$CIRCLE_TAG
              docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD

              docker push $DOCKER_IMAGE_NAME:$CIRCLE_TAG
              docker push $DOCKER_IMAGE_NAME:latest
            fi

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+/   

      - build_only:           
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/

      - deploy:
          requires:
            - build
            - build_only
          filters:
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
